C51 COMPILER V9.59.0.0   MAIN                                                              12/20/2023 17:46:02 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\software\keil\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /**********************慧净电子智能小车例程************************
   2          *  平台：HJ-C51 HJ-1G HL-1 HJ-3G HJ-C52  + Keil uVision4 + STC89C52 + AT89S52
   3          *  名称：HL-1智能小车超声波程序
   4          *  公司：慧净电子科技有限公司
   5          *  淘宝：http://shop37031453.taobao.com
   6          *  网站：www.hjmcu.com    www.hlmcu.com
   7          *  编写?H
   8          *  日期：2008-8-08
   9          *  修改内容：传感器IO口分别接到P3.2 P3.3 口，每个小车电机参考可能不同，请自己调整参考，以更稳定走黑线
  10          *   QQ : 398115088 121350852
  11          *  晶振:11.0592MHZ
  12          *  说明：免费开源，不提供源代码分析，有问题直接到慧净论坛交流
  13          *  论坛：
  14          *  硬件设置：要有自己动手能力，才能完成实验
  15          *  使用说明：根据下面IO口自己用杜邦线连接各种模块，可以自己修改各种模块IO口
  16          *  需要购买慧净电子智能小车相关模块才能做实验--请直接到慧净网站购买
  17          *  学习建议：请到慧净电子学习网WWW.HJMCU.COM免费下载52课《从零到项目开发学51单片机与C语言技术视频教程》 BT
             -下载3.63G
  18             重点提示：本程序只做参考，不提供技术支持，请自己研究吸收。
  19             *  同时要接好LCD1602 注意调节W1对比度，用电脑USB供电时调大一点，用电池供电时调小一点对比度。
  20          
  21             HL-1与HL-1智能小车底盘接线方法，请一定照做，否则可能不工作，并烧毁小车。
  22          
  23             J3
  24             IN1--接到--实验板上的P1.2
  25             IN2--接到--实验板上的P1.3
  26             EN1--接到--实验板上的P1.4
  27             EN2--接到--实验板上的P1.5
  28             IN3--接到--实验板上的P1.6
  29             IN4--接到--实验板上的P1.7
  30             J4
  31             IN5--接到--实验板上的P2.1
  32             IN6--接到--实验板上的P2.0
  33             J5
  34             OUT1--接到--实验板上的P3.3
  35             OUT2--接到--实验板上的P3.4
  36             OUT3--接到--实验板上的P3.5
  37             OUT4--接到--实验板上的P3.6
  38          
  39             电源接法----请注意核对，一定要100%正确，否则会烧坏HL-1实验板
  40             J17
  41             VCC--接到--实验板上的 TTL V 引脚
  42             GND--接到--实验板上的 TTL G 引脚
  43          ******************************************************************/
  44          // 说明：如果没有LCD1602液晶显示屏的同学，请用杜邦把P0.7引脚接到GND，效果一样。
  45          
  46          #include <intrins.h>
  47          #include "LCD1602display.h"
  48          #include <AT89X52.H>
  49          #include <HJ-4WD_PWM.H>
  50          
  51          // #include "STC12C5A60S2_PWM.h"
  52          #define TX P2_1
  53          #define RX P2_0
  54          sbit DU = P2 ^ 6;
C51 COMPILER V9.59.0.0   MAIN                                                              12/20/2023 17:46:02 PAGE 2   

  55          sbit WE = P2 ^ 7;
  56          #define Forward_L_DATA 190 // 当前进不能走直线的时候，请调节这两个参数，理想的时候是100,100，最大256，最小
             -0。0的时候最慢，256的时候最快
  57          #define Forward_R_DATA 190 // 例如小车前进的时候有点向左拐，说明右边马达转速过快，那可以取一个值大一点，另
             -外一个值小一点，例如 200  190
  58                                                             // 直流电机因为制造上的误差，同一个脉宽下也不一定速度一致的，需要自己手动调节
  59          
  60          // sbit P4_0=0xc0;      //P4口地址
  61          
  62          /*****按照原图接线定义******/
  63          sbit L293D_IN1 = P1 ^ 2;
  64          sbit L293D_IN2 = P1 ^ 3;
  65          sbit L293D_IN3 = P1 ^ 6;
  66          sbit L293D_IN4 = P1 ^ 7;
  67          sbit L293D_EN1 = P1 ^ 4;
  68          sbit L293D_EN2 = P1 ^ 5;
  69          
  70          sbit BUZZ = P2 ^ 3;
  71          
  72          // void cmg88()//关数码管，点阵函数
  73          //{
  74          // DU=1;
  75          // P0=0X00;
  76          // DU=0;
  77          // }
  78          
  79          void Delay400Ms(void); // 延时400毫秒函数
  80          
  81          unsigned char code Range[] = "songzirui666"; // LCD1602显示格式
  82          unsigned char code ASCII[13] = "0123456789.-M";
  83          unsigned char code table[] = "Distance:000.0cm";
  84          unsigned char code table1[] = "!!! Out of range";
  85          
  86          unsigned char disbuff[4] = {0, 0, 0, 0}; // 用于分别存放距离的值0.1mm、mm、cm和m的值
  87          
  88          void Count(void); // 距离计算函数
  89          
  90          // unsigned int  time=0;//用于存放定时器时间值
  91          unsigned long S = 0; // 用于存放距离的值
  92          bit flag = 0;            // 量程溢出标志位
  93          
  94          #define left 'C'
  95          #define right 'D'
  96          #define up 'A'
  97          #define down 'B'
  98          #define stop 'F'
  99          
 100          char code str[] = "收到指令，向前!\n";
 101          char code str1[] = "收到指令，向后!\n";
 102          char code str2[] = "收到指令，向左!\n";
 103          char code str3[] = "收到指令，向右!\n";
 104          char code str4[] = "收到指令，停止!\n";
 105          
 106          bit flag_REC = 0;
 107          bit flag1 = 0;
 108          int flage2 = 0;
 109          
 110          unsigned char i = 0;
 111          unsigned char dat = 0;
 112          unsigned char buff[5] = 0; // 接收缓冲字节
 113          void Timer_Count(void);
 114          
C51 COMPILER V9.59.0.0   MAIN                                                              12/20/2023 17:46:02 PAGE 3   

 115          /************************************************************************/
 116          // 字符串发送函数
 117          void send_str()
 118          // 传送字串
 119          {
 120   1              unsigned char i = 0;
 121   1              while (str[i] != '\0')
 122   1              {
 123   2                      SBUF = str[i];
 124   2                      while (!TI)
 125   2                              ;       // 等特数据传送
 126   2                      TI = 0; // 清除数据传送标志
 127   2                      i++;    // 下一个字符
 128   2              }
 129   1      }
 130          
 131          void send_str1()
 132          // 传送字串
 133          {
 134   1              unsigned char i = 0;
 135   1              while (str1[i] != '\0')
 136   1              {
 137   2                      SBUF = str1[i];
 138   2                      while (!TI)
 139   2                              ;       // 等特数据传送
 140   2                      TI = 0; // 清除数据传送标志
 141   2                      i++;    // 下一个字符
 142   2              }
 143   1      }
 144          
 145          void send_str2()
 146          // 传送字串
 147          {
 148   1              unsigned char i = 0;
 149   1              while (str2[i] != '\0')
 150   1              {
 151   2                      SBUF = str2[i];
 152   2                      while (!TI)
 153   2                              ;       // 等特数据传送
 154   2                      TI = 0; // 清除数据传送标志
 155   2                      i++;    // 下一个字符
 156   2              }
 157   1      }
 158          
 159          void send_str3()
 160          // 传送字串
 161          {
 162   1              unsigned char i = 0;
 163   1              while (str3[i] != '\0')
 164   1              {
 165   2                      SBUF = str3[i];
 166   2                      while (!TI)
 167   2                              ;       // 等特数据传送
 168   2                      TI = 0; // 清除数据传送标志
 169   2                      i++;    // 下一个字符
 170   2              }
 171   1      }
 172          
 173          void send_str4()
 174          // 传送字串
 175          {
 176   1              unsigned char i = 0;
C51 COMPILER V9.59.0.0   MAIN                                                              12/20/2023 17:46:02 PAGE 4   

 177   1              while (str4[i] != '\0')
 178   1              {
 179   2                      SBUF = str4[i];
 180   2                      while (!TI)
 181   2                              ;       // 等特数据传送
 182   2                      TI = 0; // 清除数据传送标志
 183   2                      i++;    // 下一个字符
 184   2              }
 185   1      }
 186          
 187          void sint() interrupt 4 // 中断接收3个字节
 188          {
 189   1      
 190   1              if (RI) // 是否接收中断
 191   1              {
 192   2                      RI = 0;
 193   2                      dat = SBUF;
 194   2                      if (dat == 'O' && (i == 0)) // 接收数据第一帧
 195   2                      {
 196   3                              buff[i] = dat;
 197   3                              flag1 = 1; // 开始接收数据
 198   3                      }
 199   2                      else if (flag1 == 1)
 200   2                      {
 201   3                              i++;
 202   3                              buff[i] = dat;
 203   3                              if (i >= 2)
 204   3                              {
 205   4                                      i = 0;
 206   4                                      flag1 = 0;
 207   4                                      flag_REC = 1;
 208   4                              } // 停止接收
 209   3                      }
 210   2              }
 211   1      }
 212          
 213          //========================================================================================================
             -=================
 214          /********距离计算程序***************/
 215          void Conut(void)
 216          {
 217   1              time = TH1 * 256 + TL1;
 218   1              TH1 = 0;
 219   1              TL1 = 0;
 220   1              // 0.00034米/1000=0.34毫米  也就是1us能走0.34毫米
 221   1              // 但是，我们现在计算的是从超声波发射到反射接收的双路程，
 222   1              // 所以我们将计算的结果除以2才是实际的路程
 223   1              S = time;         // 先算出一共的时间是多少微秒。
 224   1              S = S * 0.17; // 此时计算到的结果为毫米，并且是精确到毫米的后两位了，有两个小数点
 225   1                                        // 0.17=3.4/2
 226   1              //=======================================
 227   1              if ((S >= 5000) ) // 超出测量范围
 228   1              {BUZZ = 0; //
 229   2                                                      Delay1ms(50);
 230   2                                                      BUZZ = 1;
 231   2                      flag = 0;
 232   2              }
 233   1              else
 234   1              {
 235   2                      if (S == 0)
 236   2                      {
 237   3      
C51 COMPILER V9.59.0.0   MAIN                                                              12/20/2023 17:46:02 PAGE 5   

 238   3                              DisplayListChar(0, 1, table1);
 239   3                      }
 240   2      
 241   2                      else
 242   2                      {
 243   3      
 244   3                              disbuff[0] = S % 10;
 245   3                              disbuff[1] = S / 10 % 10;
 246   3                              disbuff[2] = S / 100 % 10;
 247   3                              disbuff[3] = S / 1000;
 248   3                              DisplayListChar(0, 1, table);
 249   3                              DisplayOneChar(9, 1, ASCII[disbuff[3]]);
 250   3                              DisplayOneChar(10, 1, ASCII[disbuff[2]]);
 251   3                              DisplayOneChar(11, 1, ASCII[disbuff[1]]);
 252   3                              DisplayOneChar(12, 1, ASCII[10]);
 253   3                              DisplayOneChar(13, 1, ASCII[disbuff[0]]);
 254   3                      }
 255   2              }
 256   1      }
 257          
 258          /********************************************************/
 259          void zd0() interrupt 3 // T0中断用来计数器溢出,超过测距范围`
 260          {
 261   1              if (flage2 == 2)
 262   1              {               
 263   2                      
 264   2              }
 265   1      }
 266          
 267          /********超声波高电平脉冲宽度计算程序***************/
 268          void Timer_Count(void)
 269          {
 270   1              TR1 = 1; // 开启计数
 271   1              while (RX)
 272   1                      ;        // 当RX为1计数并等待
 273   1              TR1 = 0; // 关闭计数
 274   1              Conut(); // 计算
 275   1      }
 276          /********************************************************/
 277          void StartModule() // 启动模块
 278          {
 279   1      
 280   1              TX = 1; // 启动一次模块
 281   1              Delay10us(2);
 282   1              TX = 0;
 283   1      }
 284          /********************************************************/
 285          
 286          /*************主程序********************/
 287          void main(void)
 288          {
 289   1              unsigned int a;
 290   1              // cmg88();//关数码管
 291   1              Delay1ms(400); // 启动等待，等LCM讲入工作状态
 292   1              LCMInit();         // LCM初始化
 293   1              Delay1ms(5);   // 延时片刻
 294   1      
 295   1              DisplayListChar(0, 0, Range);
 296   1              DisplayListChar(0, 1, table);
 297   1      
 298   1              //===============================
 299   1              // PWM_ini();
C51 COMPILER V9.59.0.0   MAIN                                                              12/20/2023 17:46:02 PAGE 6   

 300   1              //===============================
 301   1              TMOD = 0x20;
 302   1              TH1 = 0xFd; // 11.0592M晶振，9600波特率
 303   1              TL1 = 0xFd;
 304   1              SCON = 0x50;
 305   1              PCON = 0x00;
 306   1              TR1 = 1;
 307   1              ES = 1;
 308   1              EA = 1;
 309   1              //=================================
 310   1      
 311   1      A:
 312   1              if (flage2 == 1)
 313   1              {                         // 蜂鸣器响一声
 314   2                      BUZZ = 0; //
 315   2                      Delay1ms(50);
 316   2                      BUZZ = 1;                       // 响50ms后关闭蜂鸣器
 317   2                      TMOD  = 0x10; // 设T0为方式1，GATE=1；
 318   2                      EA = 1;                         // 开启总中断
 319   2                      TH1 = 0;
 320   2                      TL1 = 0;
 321   2                      ET1 = 1; // 允许T0中断
 322   2      
 323   2                      TH0 = 0XFc; // 1ms定时
 324   2                      TL0 = 0X18;
 325   2                      TR0 = 1;
 326   2                      ET0 = 1;
 327   2                      flage2 = 2;
 328   2                      while (flage2 == 2)
 329   2                      {
 330   3      
 331   3                              if (Left_1_led == 0 && Right_1_led == 0)
 332   3                              {
 333   4                                      run(); // 调用前进函数
 334   4                              }
 335   3                              if (Right_2_led == 0 && Left_2_led == 0) // 避障两边传感器同时检测到红外
 336   3                              {
 337   4                                      stoprun(); // 调用电机停止函数
 338   4                                      RX = 1;
 339   4                                      StartModule(); // 启动模块
 340   4      
 341   4                                      for (a = 951; a > 0; a--)
 342   4                                      {
 343   5      
 344   5                                              if (RX == 1)
 345   5                                              {
 346   6                                                      Timer_Count(); // 超声波高电平脉冲宽度计算函数
 347   6                                              }
 348   5                                      }
 349   4                                      delay(100);
 350   4                                      
 351   4                              }
 352   3                              else
 353   3                              {
 354   4                                      if (Left_1_led == 1 && Right_1_led == 0) // 左边检测到黑线
 355   4                                      {
 356   5                                              leftrun(); // 调用小车左转  函数
 357   5                                              run();
 358   5                                      }
 359   4      
 360   4                                      if (Right_1_led == 1 && Left_1_led == 0) // 右边检测到黑线
 361   4                                      {
C51 COMPILER V9.59.0.0   MAIN                                                              12/20/2023 17:46:02 PAGE 7   

 362   5                                              rightrun();
 363   5                                              run();
 364   5                                      }
 365   4                              }
 366   3                      }
 367   2              }
 368   1      
 369   1              //=======================================================================================================
             -================
 370   1              while (flage2 != 1)
 371   1              {
 372   2      
 373   2                      if (flag_REC == 1)
 374   2                      {
 375   3                              flag_REC = 0;
 376   3                              if (buff[0] == 'O' && buff[1] == 'N') // 第一个字节为O，第二个字节为N，第三个字节为控制码
 377   3                                      switch (buff[2])
 378   3                                      {
 379   4                                      case up: // 前进
 380   4                                              flage2 = 1;
 381   4                                              goto A;
 382   4                                              break;
 383   4                                      }
 384   3                      }
 385   2              }
 386   1              // 有信号为0  没有信号为1
 387   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1244    ----
   CONSTANT SIZE    =    145    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     23      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
